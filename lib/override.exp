# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
# 2002, 2003, 2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
#
# This file is part of DejaGnu.
#
# DejaGnu is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# DejaGnu is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DejaGnu; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.

# This file was written by Edward Jones <ed.jones@embecosm.com>.


# Variables to hold the override scripts process and spawn ids
set override_pid 0
set override_sid 0

# copy of the spawn_id saved whilst interacting with the override script
set saved_sid 0


# Initialize the override script, this then allows the testsuite to query the
# test manifest and check if a given test has been overridden. This must be
# called before any other proc may be used.
proc init_override_script { } {
    global override_sid
    global override_pid

    set override_pid [spawn override_test.py manifest]
    set override_sid $spawn_id
    expect "READY"
}


# Kill the process associated with the override script
proc finish_override_script { } {
    global override_sid
    global override_pid

    exec kill -12 $override_pid
    set override_sid 0
}


# Query the override script, this takes various parameters about the test or
# subtest being run, and then consults the manifest to check whether the
# test has been overridden.
#
# A return of 0 signifies that the test does not appear in the manifest, 1
# is for a test which should PASS, and 2 and 3 are for tests which are XFAIL
# and UNSUPPORTED respectively.
proc query_override_script { filename flags subtest line } {
    global override_sid
    global override_pid
    global spawn_id

    if {[info exists spawn_id]} {
        set saved_sid $spawn_id
    } else {
        set saved_sid $override_sid
    }
    set spawn_id $override_sid

    send "$filename $flags $subtest $line\n"
    expect {
        "ABSENT"      { set action 0; }
        "PASS"        { set action 1; }
        "XFAIL"       { set action 2; }
        "UNSUPPORTED" { set action 3; }
    }

    # recover the spawn_id that was active
    set spawn_id $saved_sid
    return $action
}

